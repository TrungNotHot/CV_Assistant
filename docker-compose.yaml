services:
  grab_psql:
    image: postgres:15
    container_name: grab_psql
    volumes:
      - ./postgresql:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file: 
      - env
    networks:
      - grab_network

  minio:
    hostname: minio
    image: minio/minio
    container_name: minio
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - ./minio:/data
    ports:
      - "9001:9001"
      - "9000:9000"
    env_file:
      - env
    networks:
      - grab_network

  mc:
    image: minio/mc
    container_name: mc
    hostname: mc
    env_file:
      - env
    entrypoint: >
      /bin/sh -c "  until (/usr/bin/mc config host add minio http://minio:9000 minio minio123)  do echo '...waiting...' && sleep 10; done; /usr/bin/mc mb minio/datalake; / usr/bin/mc policy set public minio/datalake; exit 0; "
    depends_on:
      - minio
    networks:
      - grab_network
      

# Dagster
  grab_dagster:
    build:
      context: ./dockerimages/dagster/
    container_name: grab_dagster
    image: grab_dagster

  grab_dagster_dagit:
    image: grab_dagster:latest
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "3001"
      - -w
      - workspace.yaml
    container_name: grab_dagster_dagit
    expose:
      - "3001"
    ports:
      - "3001:3001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dagster_home:/opt/dagster/dagster_home
    env_file:
      - env
    networks:
      - grab_network

  grab_dagster_daemon:
    image: grab_dagster:latest
    entrypoint:
      - dagster-daemon
      - run
    container_name: grab_dagster_daemon
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dagster_home:/opt/dagster/dagster_home
    env_file:
      - env
    networks:
      - grab_network
  
  # # etl
  # etl_pipeline:
  #   build:
  #     context: ./etl_pipeline
  #     dockerfile: Dockerfile
  #   image: etl_pipeline:latest
  #   container_name: etl_pipeline
  #   volumes:
  #     - ./etl_pipeline:/opt/dagster/app/etl_pipeline
  #   env_file: 
  #     - env
  #   ports:
  #     - "4040:4040"
  #   networks:
  #     - grab_network

networks:
  grab_network:
    driver: bridge
    name: grab_network